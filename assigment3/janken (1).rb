class  Player
  def  hand
class Player
  def hand
    # Display "Sentence that asks the player to enter 0 ~ 2".
    puts "Enter number "
    puts " Enter numbers. "
    puts " 0: Rock, 1: Scissors , 2: Paper "
     # Get what the player has entered in the variable "input_hand" and substitute it.
     # Get what the player has entered in the variable "input_hand" and substitute it.2
      #Hint! Use the "gets method".
     input_hand = gets.to_i
    # If "input_hand" (acquired value) is either "0, 1, 2", it will escape from while, otherwise it will be repeated from the beginning.
@@ -14,52 +14,52 @@ def  hand
         puts "PLease enter a number from 0 to 2"
         input_hand = gets.to_i
       end
       if input_hand == 0
         puts "Your hand is rock"
       elsif input_hand == 1
         puts "Your hand is scissors"
       elsif input_hand ==2
         puts "Your hand is paper"
       end

       return input_hand
 end
       puts "You entered #{input_hand}"
       input_hand

  end
end
# Write the logic that the enemy randomly generates a value of "0 ~ 2".
class  Enemy
  def  hand
    rand (0..2)

class Enemy
  def hand
    random_num=rand (0..2)
    random_num
    # Randomly output the values â€‹â€‹of goo, choki, and par.
  end
end
# Write the logic to play rock-paper-scissors with "0 ~ 2" entered by the player (yourself) and "0 ~ 2" randomly generated by the enemy, and output the result on the console.
class  Janken
  def  pon (player_hand, enemy_hand)
class Janken
  def pon (player_hand, enemy_hand)
    janken = ["rock", "scissors", "paper"]
    puts "The opponent's hand is #{janken[enemy_hand]}."

      if player_hand == enemy_hand
         puts "Draw"
         puts "PLease enter a number from 0 to 2"
         input_hand = gets.to_i
         puts "draw"
         player = Player.new
         enemy = Enemy.new
         janken = Janken.new
         next_game = janken.pon(player.hand, enemy.hand)

      elsif
        (player_hand == 0 && enemy_hand == 1) || (player_hand == 1 && enemy_hand == 2) || (player_hand == 2 && enemy_hand == 0)
         puts "You Won the game"

         return false
     else
        puts " You lost the game"
        puts " You lose the game"
        return false
  end
end
# Substitute the instantiated Player for the variable "player".
end # Substitute the instantiated Player for the variable "player".
player = Player .new
 # Assign an instantiation of Enemy to the variable "enemy".
enemy = Enemy .new
 # Assign an instantiation of Janken to the variable "janken".
janken = Janken .new

 # Assign "true" to the variable "next_game". * This is because the iterative process is executed forever while while unless "next_game" becomes "false".
# Let's implement according to the example of the ype after. * Be careful of commenting out when implementing.
# while next_game
# Substitute the value (return value) returned by executing rock-paper-scissors into the variable "next_game".
  # I'm running rock-paper-scissors with "janken.pon (player.hand, enemy.hand)".
next_game = janken.pon(player.hand, enemy.hand)
  # When "false" is returned in the execution result of rock-paper-scissors, this while is terminated. When "true" is returned, it repeats that number of times.

end
